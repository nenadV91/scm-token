/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IcoInterface extends utils.Interface {
  functions: {
    "claim()": FunctionFragment;
    "claimableAmount(address)": FunctionFragment;
    "invest(uint256)": FunctionFragment;
    "remaining()": FunctionFragment;
    "scm()": FunctionFragment;
    "weth()": FunctionFragment;
    "wethAllowance(address)": FunctionFragment;
    "wethInvested()": FunctionFragment;
    "wethLimit()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "claimableAmount"
      | "invest"
      | "remaining"
      | "scm"
      | "weth"
      | "wethAllowance"
      | "wethInvested"
      | "wethLimit"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimableAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "remaining", values?: undefined): string;
  encodeFunctionData(functionFragment: "scm", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wethAllowance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wethInvested",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wethLimit", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remaining", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethInvested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wethLimit", data: BytesLike): Result;

  events: {};
}

export interface Ico extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IcoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    invest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    scm(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    wethAllowance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wethInvested(overrides?: CallOverrides): Promise<[BigNumber]>;

    wethLimit(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableAmount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  invest(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remaining(overrides?: CallOverrides): Promise<BigNumber>;

  scm(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  wethAllowance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  wethInvested(overrides?: CallOverrides): Promise<BigNumber>;

  wethLimit(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claim(overrides?: CallOverrides): Promise<void>;

    claimableAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invest(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    remaining(overrides?: CallOverrides): Promise<BigNumber>;

    scm(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    wethAllowance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wethInvested(overrides?: CallOverrides): Promise<BigNumber>;

    wethLimit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remaining(overrides?: CallOverrides): Promise<BigNumber>;

    scm(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    wethAllowance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wethInvested(overrides?: CallOverrides): Promise<BigNumber>;

    wethLimit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAllowance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wethInvested(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
